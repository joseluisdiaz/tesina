-- Small Int representation
MAX_INT = 6
datatype SmallInt = SI.{0 .. MAX_INT} | Overflow
--
add(SI.a, SI.b) = let sum = a + b within if sum <= MAX_INT then SI.sum else Overflow
add(_, _) = Overflow

sub(SI.a, SI.b) = let sub = a - b within if sub >= 0 then SI.sub else Overflow
sub(_, _) = Overflow

mult(SI.a, SI.b) = let mult = a * b within if mult <= MAX_INT then SI.mult else Overflow
mult(_, _) = Overflow

eq(SI.a, SI.b) = a == b
eq(_, _) = false


-- Possible actor names
datatype ActorID = Queue.{1} | Node.{1,2,3} | Main.{1} | NoId

datatype Atoms = ENQUEUE | DEQUEUE | INSERT | DELETE

-- Possible types for actors
datatype VALUE = ACTOR.ActorID | INT.SmallInt | ATOM.Atoms | None

-- Start message
channel CreateAsk:ActorID.(VALUE, VALUE)
channel Create:ActorID.(VALUE, VALUE)

-- Send ( actor to mailbox ) and Recv ( mailbox to actor ) communication
channel CommSend:ActorID.(VALUE, VALUE)
channel CommRecv:ActorID.(VALUE, VALUE)


buff(left, right, {}, N) = left?msg -> buff(left, right, {msg}, N)

buff(left, right, msgs, N) = [] msg: msgs @ right!msg -> buff(left, right, diff(msgs, {msg}), N)
                             [] (card(msgs) < N - 1 & left?msg -> buff(left, right, union(msgs, {msg}), N))

MAILBOX_SIZE = 3
mailboxes = ||| actor: ActorID @ buff(CommSend.actor, CommRecv.actor, {}, MAILBOX_SIZE)

create(actorId) = CreateAsk!actorId?m -> Create.actorId!m -> STOP
creates = ||| actor: ActorID @ create(actor)

-- become link
fwd(in, out) = CommRecv.in?msg -> CommSend.out!msg -> fwd(in, out)

-- Comportamiento del Actor Node
node = ||| actorId : {|Node|} @ Create.actorId?(content, link) -> nodeRunning(actorId, content, link)

nodeRunning(self, content, link) =
  CommRecv.self?(ATOM.DELETE, ACTOR.client) ->
  CommSend.client!(link, content) ->
  STOP
  []
  CommRecv.self?(ATOM.INSERT, newLink) ->
  nodeRunning(self, content, newLink)

-- Comportamiento del Actor Queue
queue = ||| actorId : {|Queue|} @ Create.actorId?(None, None) -> emptyQueueRunning(actorId)

emptyQueueRunning(self) =
  CommRecv.self?(ATOM.ENQUEUE, INT.value) ->
  CreateAsk?Node.pid!(INT.value, ACTOR.NoId) ->
  queueRunning(self, ACTOR.Node.pid, ACTOR.Node.pid)

queueRunning(self, ACTOR.first, ACTOR.last) =
  CommRecv.self?(ATOM.ENQUEUE, value) ->
  CreateAsk?Node.newLast!(value, ACTOR.NoId) ->
  CommSend.first!(ATOM.INSERT, ACTOR.Node.newLast) ->
  queueRunning(self, ACTOR.first, ACTOR.Node.newLast)
  []
  CommRecv.self?(ATOM.DEQUEUE, ACTOR.client) ->
  CommSend.first!(ATOM.DELETE, ACTOR.self) ->
  CommRecv.self?(ACTOR.newFirst, INT.value) ->
  CommSend.client!(INT.value, None) ->
  if (newFirst == NoId) then
    emptyQueueRunning(self)
  else
    queueRunning(self, ACTOR.newFirst, ACTOR.last)

actor_main1 = CreateAsk?Queue.pid!(None, None) -> actor_main1_r(Queue.pid)

actor_main1_r(pid) =
    CommSend.pid!(ATOM.ENQUEUE, INT.SI.1) -> actor_main1_r(pid) |~|
    CommSend.pid!(ATOM.ENQUEUE, INT.SI.2) -> actor_main1_r(pid) |~|
    CommSend.pid!(ATOM.DEQUEUE, ACTOR.Main.1) -> CommRecv.Main.1?(INT.V, None) -> actor_main1_r(pid)

actor_main2 = CreateAsk?Queue.pid!(None, None) -> actor_main2_r(Queue.pid)
actor_main2_r(pid) =
      CommSend.pid!(ATOM.ENQUEUE, INT.SI.1) -> actor_main2_r(pid) |~|
      CommSend.pid!(ATOM.ENQUEUE, INT.SI.2) -> actor_main2_r(pid) |~|
      CommSend.pid!(ATOM.DEQUEUE, ACTOR.Main.1) -> CommRecv.Main.1?(INT.V, None) -> actor_main2_r(pid)

--
COMM = {|CommSend, CommRecv, Create, CreateAsk|}
--

SYSTEM1 = (queue ||| node ||| actor_main1) [|COMM|] ( mailboxes ||| creates )
SYSTEM2 = (queue ||| node ||| actor_main2) [|COMM|] ( mailboxes ||| creates )

assert SYSTEM2 [T= SYSTEM1
assert SYSTEM2 [F= SYSTEM1

assert SYSTEM1 [T= SYSTEM2
assert SYSTEM1 [F= SYSTEM2
