- Reprecentación de enteros pequeños
MAX_INT = 2
V = {0 .. MAX_INT}
datatype SmallInt = SI.V | Overflow

add(SI.a, SI.b) = let sum = a + b within if sum <= MAX_INT then SI.sum else Overflow
add(_, _) = Overfl{ow

-- Primitivos
datatype VALUE = ACTOR.ActorID | INT.SmallInt | None

-- Comunicaciones
channel CommSend:ActorID.(VALUE, VALUE)
channel CommRecv:ActorID.(VALUE, VALUE)

mailbox(i, <>) = CommSend?i.x -> mailbox(i, <x>)
mailbox(i, <x>) = CommRecv!i.x -> mailbox(i,<>) [] CommSend?i.y -> mailbox(i, <x, y>)
mailbox(i, <x,y>) = CommRecv!i.x -> mailbox(i,<y>) [] CommRecv!i.y -> mailbox(i, <x>)

mailboxes = ||| actor: ActorID @ mailbox(actor, <>)

-- Actores
datatype ActorID = F.{1} | G.{1,2} | Main.{1}

channel CreateAsk:ActorID.(VALUE, VALUE)
channel Create:ActorID.(VALUE, VALUE)

create(actorId) = CreateAsk!actorId?m -> Create.actorId!m -> STOP
creates = ||| actor: ActorID @ create(actor)

-- Comportamiento del actor F
f = ||| actorId : {|F|} @ Create!actorId?(None, None) -> fRunning(actorId)
fRunning(self) =
  CreateAsk!G.t1.(ACTOR.self, Value.INT.0) ->
  CreateAsk!G.t2.(ACTOR.self, Value.INT.1) ->
  f(self)

-- Comportamiento del actor G
g = ||| actorId : {|G|} @ Create!actorId?(None, None) -> gRunning(actorId)
gRunning(self, Actor.client, INT.v) =
  CommSend!client.(Value.(add(v, SI.1)), None) ->
  STOP

-- Main
main =
  CreateAsk?F.pid!(None, None) ->
  STOP

--
COMM = {|CommSend, CommRecv, Create, CreateAsk|}
--

SYSTEM = (f ||| g ||| main) [|COMM|] ( mailboxes ||| creates)

