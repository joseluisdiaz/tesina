V = {0,1,2,3,4,5,6,7,8,9,10}

TAGV = {1,2}

datatype SmallInt = SI.V | Overflow

datatype ActorName = F | G
datatype Tag = Tag1.TAGV | Tag2.TAGV.TAGV | TagOverflow

datatype M = T.Tag | Value.SmallInt | None

channel Start:ActorName.Tag.(M,M)
-- channel Comm:Tag.(M,M)

channel CommEx:Tag.(M, M)
channel CommIn:Tag.(M, M)

mailbox(i,  <>) = CommEx?i.x -> mailbox(i, <x>)
mailbox(i, <x>) = CommIn!i.x -> mailbox(i,<>) [] CommEx?i.y -> mailbox(i, <x, y>)
mailbox(i, <x,y>) = CommIn!i.x -> mailbox(i,<y>) [] CommIn!i.y -> mailbox(i, <x>)

tag(Tag1.x, y) = Tag2.x.y
tag(_, _) = TagOverflow


add(SI.a, SI.b) = let sum = a + b within if sum <= 10 then SI.sum else Overflow
add(_, _) = Overflow

f(m) = Start?F.m.(None, None) -> started_f(m)
started_f(m) =
  Start!G.tag(m, 1).(T.m, Value.SI.2) ->
  CommIn?m.(Value.V, None) ->
  started_f(m) -- (same Behaviour)
started_f(_) = STOP

g(m) = Start?G.m.(a,v) -> started_g(m,a,v)
started_g(m, T.a1, Value.v) = CommEx!a1.(Value.(add(v, SI.1)), None) -> g(m) -- (botton Behaviour)
started_g(_, _, _) = STOP

h = Start!F.(Tag1.1).(None, None) -> STOP

Starts(actor) = { Start.actor.t.(v1, v2) | t <- Tag, v1 <- M, v2 <- M }

CommsInt(t) = { CommIn.t.(v1, v2) | v1 <- M, v2 <- M } -- las comuncaciones internas son sola para Ã©l
AllCommsInt = { CommIn.t.(v1, v2) | t <- Tag, v1 <- M, v2 <- M }
CommsExt = { CommEx.t.(v1, v2) | t <- Tag, v1 <- M, v2 <- M }
Comms(t) = union(CommsInt(t), CommsExt)

AllComms = union(AllCommsInt, CommsExt)

fs = || i:Tag @ [union(Starts(G), union(Starts(F), Comms(i)))] f(i)
gs = || i:Tag @ [union(Starts(G), Comms(i))] g(i)
xxx = Starts(F)
mailboxs = || i:Tag @ [Comms(i)] mailbox(i, <>)

SYSTEM = (( fs [|Starts(G)|] gs ) [|xxx|] h) [|AllComms|] mailboxs
