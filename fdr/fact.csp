-- Small Int representation

MAX_INT = 6
datatype SmallInt = SI.{0 .. MAX_INT} | Overflow
--
add(SI.a, SI.b) =
  let sum = a + b within if sum <= MAX_INT then SI.sum else Overflow
add(_, _) = Overflow

sub(SI.a, SI.b) =
  let sub = a - b within if sub >= 0 then SI.sub else Overflow
sub(_, _) = Overflow

mult(SI.a, SI.b) =
  let mult = a * b within if mult <= MAX_INT then SI.mult else Overflow
mult(_, _) = Overflow

eq(SI.a, SI.b) = a == b
eq(_, _) = false

-- Possible actor names
datatype ActorID = factorial | factorialWorker | main
N_FACTORIAL = 1
N_FACTORIAL_WORKER = 3

MailboxIDS = { 0 .. N_FACTORIAL + N_FACTORIAL_WORKER }

-- Possible types for actors
datatype VALUE = ACTOR.MailboxIDS | INT.SmallInt | None

-- Actor creation decoupling
channel CreateAsk:ActorID.MailboxIDS.(VALUE, VALUE)
channel Create:ActorID.MailboxIDS.(VALUE, VALUE)

create(mailboxId) = CreateAsk?actorId!mailboxId?m -> Create.actorId!mailboxId!m -> STOP
creates = ||| mailboxId: MailboxIDS @ create(mailboxId)

-- Send ( actor to mailbox ) and Recv ( mailbox to actor ) communication
channel CommSend:MailboxIDS.(VALUE, VALUE)
channel CommRecv:MailboxIDS.(VALUE, VALUE)
MAILBOX_SIZE = 3

buff(left, right, <>) = left?msg -> buff(left, right, <msg>)

buff(left, right, xs) = if (length(xs) < MAILBOX_SIZE - 1) then
    buff_with_space(left, right, xs)
  else
    buff_full(left, right, xs)

buff_with_space(left, right, <x> ^ xs) =
  right!x -> buff(left, right, xs)
  []
  left?y -> buff(left, right, <x> ^ xs ^ <y>)

buff_full(left, right, <x> ^ xs) = right!x -> buff(left, right, xs)

mailboxes = ||| mailboxId: MailboxIDS @ buff(CommSend.mailboxId, CommRecv.mailboxId, <>)

-- Factorial actor
Factorials = Create.factorial?mailboxId?(None, None) -> Factorial(mailboxId)
Factorial(self) = CommRecv?self.(ACTOR.mailboxClient, INT.k) ->
if (eq(k,SI.0))
  then
    CommSend!mailboxClient.(INT.SI.1, None) -> Factorial(self)
  else
    let
      newK = sub(k, SI.1)
    within
      CreateAsk.factorialWorker?pid!(INT.k, ACTOR.mailboxClient) ->
      CommSend!self.(ACTOR.pid, INT.newK) ->
      Factorial(self)

-- FactorialWorker actor
FactorialWorkers =
  ||| i : { 1 .. N_FACTORIAL_WORKER } @ Create.factorialWorker?actorId?(INT.k, ACTOR.client) ->
  FactorialWorker(actorId, k, client)

FactorialWorker(self, k, client) = CommRecv.self?(INT.n, None) ->
    let
      val = mult(n, k)
    within
      CommSend.client!(INT.val, None) ->
      STOP

-- Main
Main =
  CreateAsk!factorial?pid!(None, None) ->
  CommSend!pid.(ACTOR.0, INT.SI.3) ->
  CommRecv?0.(INT.v, None) ->
  STOP
--
COMM = {|CommSend, CommRecv|}
INIT = {|Create, CreateAsk|}
--

SYSTEM =
  (Factorials ||| FactorialWorkers ||| Main)
    [|union(COMM,INIT)|]
  (mailboxes ||| creates)
