-- Small Int representation

MAX_INT = 6
datatype SmallInt = SI.{0 .. MAX_INT} | Overflow
--
add(SI.a, SI.b) =
  let sum = a + b within if sum <= MAX_INT then SI.sum else Overflow
add(_, _) = Overflow

sub1(SI.a) = sub(SI.a, SI.1)
sub(SI.a, SI.b) =
  let sub = a - b within if sub >= 0 then SI.sub else Overflow
sub(_, _) = Overflow

mult(SI.a, SI.b) =
  let mult = a * b within if mult <= MAX_INT then SI.mult else Overflow
mult(_, _) = Overflow

eq(SI.a, SI.b) = a == b
eq(_, _) = false

-- Possible actor names
datatype ActorID =
  ring.{1} | buildingRing.{1} | node.{1,2,3} | main.{1} | NoId

-- Possible Strings
datatype Atoms = POINT_TO | MSG

-- Possible types for actors
datatype VALUE = ACTOR.ActorID | INT.SmallInt | ATOM.Atoms | None

-- Actor creation decoupling
channel CreateAsk:ActorID.(VALUE, VALUE)
channel Create:ActorID.(VALUE, VALUE)

create(actorId) = CreateAsk!actorId?m -> Create.actorId!m -> STOP
creates = ||| actor: diff(ActorID, {main.1}) @ create(actor)

-- Send ( actor to mailbox ) and Recv ( mailbox to actor ) communication
channel CommSend:ActorID.(VALUE, VALUE)
channel CommRecv:ActorID.(VALUE, VALUE)
MAILBOX_SIZE = 3

buff(left, right, <>) = left?msg -> buff(left, right, <msg>)

buff(left, right, xs) = if (length(xs) < MAILBOX_SIZE - 1) then
    buff_with_space(left, right, xs)
  else
    buff_full(left, right, xs)

buff_with_space(left, right, <x> ^ xs) =
  right!x -> buff(left, right, xs)
  []
  left?y -> buff(left, right, <x> ^ xs ^ <y>)

buff_full(left, right, <x> ^ xs) = right!x -> buff(left, right, xs)

mailboxes = ||| actor: ActorID @ buff(CommSend.actor, CommRecv.actor, <>)

-- Ring actor
Rings =
  ||| self : {|ring|} @ Create!self?(None, None) ->
  Ring(self)

Ring(self) = CommRecv.self?(INT.n, INT.m) ->
  CreateAsk?node.nodePid!(INT.m, ACTOR.NoId) ->
  CreateAsk?buildingRing.brPid!(ACTOR.node.nodePid, ACTOR.node.nodePid) ->
  CommSend.buildingRing.brPid!(INT.(sub1(n)), INT.m) ->
  Ring(self)

-- Building Ring actor
BuildingRings =
  ||| self : {|buildingRing|} @ Create!self?(ACTOR.first, ACTOR.lastCreated) ->
  BuildingRing(self, first, lastCreated)

BuildingRing(self, first, lastCreated) = CommRecv.self?(INT.n, INT.m) ->
  if (eq(n, SI.0)) then
    CommSend.lastCreated!(ATOM.POINT_TO, ACTOR.first) ->
    CommSend.first!(ATOM.MSG, None) ->
    STOP
  else
    CreateAsk?node.nodePid!(INT.m, ACTOR.NoId) ->
    CommSend.lastCreated!(ATOM.POINT_TO, ACTOR.node.nodePid) ->
    CommSend.self!(INT.sub1(n), INT.m) ->
    BuildingRing(self, first, node.nodePid)

-- Node  actor
Nodes =
  ||| self : {|node|} @ Create!self?(INT.m, ACTOR.next) ->
  Node(self, m, next)

Node(self, m, next) =
  (CommRecv.self?(ATOM.POINT_TO, ACTOR.newNext) -> Node(self, m, newNext) )
[]
  ( CommRecv.self?(ATOM.MSG, None) ->
    if (eq(m, SI.0)) then
      CommSend.next!(ATOM.MSG, None) ->
      STOP
    else
      CommSend.next!(ATOM.MSG, None) ->
      Node(self, sub1(m), next)
 )
-- Main
Main =
  CreateAsk?ring.pid!(None, None) ->
  CommSend!ring.pid.(INT.SI.3, INT.SI.1) ->
  STOP
--
COMM = {|CommSend, CommRecv, Create, CreateAsk|}
--

SYSTEM =
  (Rings ||| BuildingRings ||| Nodes ||| Main)
    [|COMM|]
  (mailboxes ||| creates)
