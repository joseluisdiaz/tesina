-- Small Int representation
MAX_INT = 6
datatype SmallInt = SI.{0 .. MAX_INT} | Overflow
--
add(SI.a, SI.b) =
  let sum = a + b within if sum <= MAX_INT then SI.sum else Overflow
add(_, _) = Overflow

sub(SI.a, SI.b) =
  let sub = a - b within if sub >= 0 then SI.sub else Overflow
sub(_, _) = Overflow

mult(SI.a, SI.b) =
  let mult = a * b within if mult <= MAX_INT then SI.mult else Overflow
mult(_, _) = Overflow

eq(SI.a, SI.b) = a == b
eq(_, _) = false

-- Possible actor names
datatype ActorID = node.{1,2,3} | main.{1} | NoId

-- Possible Strings
datatype Atoms = PUSH | POP

-- Possible types for actors
datatype VALUE = ACTOR.ActorID | INT.SmallInt | ATOM.Atoms | None

-- Actor creation decoupling
channel CreateAsk:ActorID.(VALUE, VALUE)
channel Create:ActorID.(VALUE, VALUE)

create(actorId) = CreateAsk!actorId?m -> Create.actorId!m -> STOP
creates = ||| actor: ActorID @ create(actor)

-- Send ( actor to mailbox ) and Recv ( mailbox to actor ) communication
channel CommSend:ActorID.(VALUE, VALUE)
channel CommRecv:ActorID.(VALUE, VALUE)

MAILBOX_SIZE = 3

buff(left, right, <>) = left?msg -> buff(left, right, <msg>)

buff(left, right, xs) = if (length(xs) < MAILBOX_SIZE - 1) then
    buff_with_space(left, right, xs)
  else
    buff_full(left, right, xs)

buff_with_space(left, right, <x> ^ xs) =
  right!x -> buff(left, right, xs)
  []
  left?y -> buff(left, right, <x> ^ xs ^ <y>)

buff_full(left, right, <x> ^ xs) = right!x -> buff(left, right, xs)

mailboxes = ||| actor: ActorID @ buff(CommSend.actor, CommRecv.actor, <>)

-- become <buzÃ³n>
fwd(in, out) = CommRecv.in?msg -> CommSend.out!msg -> fwd(in, out)

-- Node actor
Nodes =
  ||| actorId : {|node|} @ Create.actorId?(INT.content, ACTOR.link) ->
  Node(actorId, content, link)

Node(self, content, link) =
  CommRecv.self?(ATOM.PUSH, INT.newContent) ->
  CreateAsk?node.newNode!(INT.content, ACTOR.link) ->
  Node(self, newContent, node.newNode)
  []
  CommRecv.self?(ATOM.POP, ACTOR.client) ->
  CommSend.client!(INT.content, None) ->
  fwd(self, link)

-- Main actor
Main =
    CreateAsk?node.pid!(INT.SI.3, ACTOR.NoId) ->
    CommSend.node.pid!(ATOM.PUSH, INT.SI.2) ->
    CommSend.node.pid!(ATOM.PUSH, INT.SI.1) ->
    CommSend.node.pid!(ATOM.POP, ACTOR.main.1) ->
    CommRecv.main.1?(INT.V, None) ->
    CommSend.node.pid!(ATOM.POP, ACTOR.main.1) ->
    CommRecv.main.1?(INT.V, None) ->
    CommSend.node.pid!(ATOM.POP, ACTOR.main.1) ->
    CommRecv.main.1?(INT.V, None) ->
    STOP

--
COMM = {|CommSend, CommRecv, Create, CreateAsk|}
--

SYSTEM =
  ( Nodes ||| Main )
    [|COMM|]
  ( mailboxes ||| creates )
