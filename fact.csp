-- Small Int representation

MAX_INT = 6
datatype SmallInt = SI.{0 .. MAX_INT} | Overflow
--
add(SI.a, SI.b) = let sum = a + b within if sum <= MAX_INT then SI.sum else Overflow
add(_, _) = Overflow

sub(SI.a, SI.b) = let sub = a - b within if sub >= 0 then SI.sub else Overflow
sub(_, _) = Overflow

mult(SI.a, SI.b) = let mult = a * b within if mult <= MAX_INT then SI.mult else Overflow
mult(_, _) = Overflow

eq(SI.a, SI.b) = a == b
eq(_, _) = false

-- Possible actor names
datatype ActorID = Factorial.{1} | FactorialWorker.{1,2,3} | Main.{1}

-- Possible types for actors
datatype M = T.ActorID | Value.SmallInt | None

-- Start message
channel Create:ActorID.(M,M)

-- External ( actor to mailbox ) and Internal ( mailbox to actor ) communication
channel CommEx:ActorID.(M, M)
channel CommIn:ActorID.(M, M)

channel newPid:ActorID

mailbox(i, <>) = CommEx.i?x -> mailbox(i, <x>)
mailbox(i, <x>) = CommIn.i!x -> mailbox(i,<>) [] CommEx.i?y -> mailbox(i, <x, y>)
mailbox(i, <x,y>) = CommIn.i!x -> mailbox(i,<y>) [] CommIn.i!y -> mailbox(i, <x>)

mailboxes = ||| actor: ActorID @ mailbox(actor, <>)


-- Comportamiento del Actor Factorial
factorial = Create!Factorial.1?(None, None) -> factorialRunning(Factorial.1)
factorialRunning(self) = CommIn?self.(T.mailboxClient, Value.k) ->
if (eq(k,SI.0))
  then
    CommEx!mailboxClient.(Value.SI.1, None) -> factorialRunning(self)
  else
    let
      newK = sub(k, SI.1)
    within
      Create?FactorialWorker.pid!(Value.k, T.mailboxClient) ->
      CommEx!self.(T.FactorialWorker.pid, Value.newK) ->
      factorialRunning(self)

factorialRunning(_) = STOP

-- Comportamiento del actor factorialWorker
factorialWorker  = ||| actorId : {|FactorialWorker|} @ Create!actorId?(Value.k, T.mailboxClient) -> factorialWorkerRunning(actorId, Value.k, T.mailboxClient)
factorialWorkerRunning(self, Value.k, T.mailboxClient) = CommIn.self?(Value.n, None) ->
    let
      val = mult(n, k)
    within
      CommEx.mailboxClient!(Value.val, None) ->
      STOP

factorialWorkerRunning(_, _, _) = STOP

actor_main =
  Create?Factorial.pid!(None, None) ->
  CommEx!Factorial.pid.(T.Main.1, Value.SI.3) ->
  CommIn?Main.1.(Value.SI.6, None) ->
  STOP

--
COMM = {|CommEx, CommIn|}
--

CREATES1 = {| Create.FactorialWorker |}
CREATES2 = {| Create.Factorial |}

SYSTEM = ((factorial [|CREATES1|] factorialWorker) [|CREATES2|] actor_main) [|COMM|] mailboxes
