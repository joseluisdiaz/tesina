-- Small Int representation

MAX_INT = 6
datatype SmallInt = SI.{0 .. MAX_INT} | Overflow
--
add(SI.a, SI.b) = let sum = a + b within if sum <= MAX_INT then SI.sum else Overflow
add(_, _) = Overflow

sub(SI.a, SI.b) = let sub = a - b within if sub >= 0 then SI.sub else Overflow
sub(_, _) = Overflow

mult(SI.a, SI.b) = let mult = a * b within if mult <= MAX_INT then SI.mult else Overflow
mult(_, _) = Overflow

eq(SI.a, SI.b) = a == b
eq(_, _) = false

-- Possible actor names
datatype ActorID = Factorial.{1} | FactorialWorker.{1,2,3} | Main.{1}

-- Possible types for actors
datatype VALUE = ACTOR.ActorID | INT.SmallInt | None

-- Actor creation decoupling
channel CreateAsk:ActorID.(VALUE, VALUE)
channel Create:ActorID.(VALUE, VALUE)

create(actorId) = CreateAsk!actorId?m -> Create.actorId!m -> STOP
creates = ||| actor: ActorID @ create(actor)


-- Send ( actor to mailbox ) and Recv ( mailbox to actor ) communication
channel CommSend:ActorID.(VALUE, VALUE)
channel CommRecv:ActorID.(VALUE, VALUE)

buff(left, right, {}, N) = left?msg -> buff(left, right, {msg}, N)

buff(left, right, msgs, N) = [] msg: msgs @ right!msg -> buff(left, right, diff(msgs, {msg}), N)
                             [] (card(msgs) < N - 1 & left?msg -> buff(left, right, union(msgs, {msg}), N))

MAILBOX_SIZE = 3
mailboxes = ||| actor: ActorID @ buff(CommSend.actor, CommRecv.actor, {}, MAILBOX_SIZE)


-- Factorial actor
factorial = Create!Factorial.1?(None, None) -> factorialRunning(Factorial.1)
factorialRunning(self) = CommRecv?self.(ACTOR.mailboxClient, INT.k) ->
if (eq(k,SI.0))
  then
    CommSend!mailboxClient.(INT.SI.1, None) -> factorialRunning(self)
  else
    let
      newK = sub(k, SI.1)
    within
      CreateAsk?FactorialWorker.pid!(INT.k, ACTOR.mailboxClient) ->
      CommSend!self.(ACTOR.FactorialWorker.pid, INT.newK) ->
      factorialRunning(self)

-- FactorialWorker actor
factorialWorker  = ||| actorId : {|FactorialWorker|} @ Create!actorId?(k, mailboxClient) -> factorialWorkerRunning(actorId, k, mailboxClient)
factorialWorkerRunning(self, INT.k, ACTOR.mailboxClient) = CommRecv.self?(INT.n, None) ->
    let
      val = mult(n, k)
    within
      CommSend.mailboxClient!(INT.val, None) ->
      STOP

factorialWorkerRunning(_, _, _) = STOP

-- Main
actor_main =
  CreateAsk?Factorial.pid!(None, None) ->
  CommSend!Factorial.pid.(ACTOR.Main.1, INT.SI.3) ->
  CommRecv?Main.1.(INT.v, None) ->
  STOP

--
COMM = {|CommSend, CommRecv, Create, CreateAsk|}
--

SYSTEM = (factorial ||| factorialWorker ||| actor_main) [|COMM|] ( mailboxes ||| creates)
